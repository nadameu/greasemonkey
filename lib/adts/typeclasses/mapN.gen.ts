import { writeFile } from 'node:fs/promises';

const range = (start: number, end: number) =>
  Array.from({ length: end - start + 1 }, (_, i) => start + i);

async function main() {
  const pre = `// AUTOMATICALLY GENERATED BY \`mapN.gen.ts\`\n\nimport { Apply, Kind, Type } from './definitions';\n\nexport const deriveMapN: <F extends Kind>(A: Apply<F>) => {\n\n`;
  const lines: string[] = [];
  const post = `
  
} = (A: any) => (f0: any, ...fs: [any, ...any[]]) => {
  const pushPartial = A.map((xs: any[]) => (x: any) => (xs.push(x), xs));
  let result = A.map((x: any) => [x])(f0);
  for (let i = 0, last = fs.length - 2; i <= last; i++) {
    result = A.ap(fs[i]!)(pushPartial(result));
  }
  const fn = fs[fs.length - 1] as Function;
  return A.map((args: any[]) => fn(...args))(result);
};
`;
  const MAX = 26;
  if (!(MAX <= 26)) throw new Error();
  for (let i = 0; i < MAX; i++) {
    lines.push(
      `<${range(0, i)
        .map(n => `a${n}`)
        .join(', ')}, ${range(0, i)
        .map(n => `e${n}`)
        .join(', ')}, b>(${range(0, i)
        .map(n => `f${n}: Type<F, e${n}, a${n}>`)
        .join(', ')}, f: (${range(0, i)
        .map(n => `a${n}: a${n}`)
        .join(', ')}) => b): Type<F, ${range(0, i)
        .map(n => `e${n}`)
        .join(' | ')}, b>;`
    );
  }
  lines.push(
    `${'   '.repeat(MAX)}(...fns: Function[]): (value: unknown) => unknown;`
  );
  await writeFile('./typeclasses/mapN.ts', `${pre}${lines.join('\n')}${post}`);
}

main();
