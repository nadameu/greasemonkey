import { writeFile } from 'node:fs/promises';

const letters = Array.from({ length: 26 }, (_, i) =>
  String.fromCharCode(0x61 + i)
);

async function main() {
  const pre = `// AUTOMATICALLY GENERATED BY \`flow.gen.ts\`\n\nexport const flow: {\n\n`;
  const lines: string[] = [];
  const mid = `\n\n} = (value: any, ...fns: Function[]) => {\n  switch (fns.length) {\n`;
  const impl: string[] = [];
  const post = `  }\n};\n`;
  const MAX = 26;
  if (!(MAX <= 26)) throw new Error();
  for (let i = 0; i < MAX; i++) {
    lines.push(
      `${i === MAX ? '' : '   '.repeat(MAX - i - 1)}<${letters.slice(0, i + 1).join(', ')}>(value: a${letters
        .slice(0, i)
        .map((x, i) => `, fn${i}: (_: ${x}) => ${letters[i + 1]}`)
        .join('')}): ${letters[i]};`
    );
    impl.push(
      `    case ${i}: return ${letters
        .slice(0, i)
        .map((_, j) => `fns[${i - j - 1}]!(`)
        .join('')}value${')'.repeat(i)};`
    );
  }
  impl.push('    default: return fns.reduceRight((x, f) => f(x), value);');
  await writeFile(
    './function/flow.ts',
    `${pre}${lines.join('\n')}${mid}${impl.join('\n')}${post}`
  );
}

main();
